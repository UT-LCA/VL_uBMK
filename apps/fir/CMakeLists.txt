project(VL_uBMK)

cmake_minimum_required(VERSION 3.1)

include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})

if(VL_FOUND)
  include_directories(${VL_INCLUDE_DIR})
endif()

find_file(Boost_LOCKFREE_QUEUE_HPP "boost/lockfree/queue.hpp" ${Boost_INCLUDE_DIRS})

if(NOT (Boost_ATOMIC_FOUND OR GCCLIBATOMIC_FOUND))
  MESSAGE(STATUS "WARNING: No atomic library, skip fir.")
else()
  if(NOT Boost_LOCKFREE_QUEUE_HPP)
    MESSAGE(STATUS "WARNING: No boost/lockfree/queue.hpp, skip fir_boost.")
  else()
    add_microbenchmark(fir_boost fir.cpp)
    target_link_libraries(fir_boost ${Boost_LIBRARIES})
    if(NOT Boost_ATOMIC_FOUND)
      target_compile_definitions(fir_boost PRIVATE -DSTDATOMIC)
      target_link_libraries(fir_boost atomic)
    endif()
    if(NOT Boost_THREAD_FOUND)
      # fall back to use pthread library find in the top CMakeLists.txt
      target_compile_definitions(fir_boost PRIVATE -DSTDTHREAD)
    endif()
    if(NOT Boost_CHRONO_FOUND)
      target_compile_definitions(fir_boost PRIVATE -DSTDCHRONO)
    endif()
  endif(NOT Boost_LOCKFREE_QUEUE_HPP)
  if(ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND)
    add_microbenchmark(fir_zmq fir.cpp)
    target_compile_definitions(fir_zmq PRIVATE -DZMQ)
    target_include_directories(fir_zmq PRIVATE ${ZMQ_INCLUDE_DIR})
    target_link_libraries(fir_zmq ${ZMQ_LIBRARY})
    if (ZMQ_STATIC_FOUND)
      target_compile_options(fir_zmq PRIVATE -static -pthread)
    endif()
    if(NOT Boost_THREAD_FOUND)
      # fall back to use pthread library find in the top CMakeLists.txt
      target_compile_definitions(fir_zmq PRIVATE -DSTDTHREAD)
    endif()
    if(NOT Boost_CHRONO_FOUND)
      target_compile_definitions(fir_zmq PRIVATE -DSTDCHRONO)
    endif()
  elseif(NOT (ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND))
    MESSAGE(STATUS "WARNING: No zmq library, skip pingpong_zmq.")
  endif()
  if(NOT VL_FOUND)
    MESSAGE(STATUS "WARNING: No libvl found, skip fir_vl.")
  else()
    add_microbenchmark(fir_vl fir.cpp)
    target_compile_definitions(fir_vl PRIVATE -DVL)
    target_link_libraries(fir_vl ${VL_LIBRARY})
    if(NOT Boost_ATOMIC_FOUND)
      target_compile_definitions(fir_vl PRIVATE -DSTDATOMIC)
      target_link_libraries(fir_vl atomic)
    endif()
    if(NOT Boost_THREAD_FOUND)
      # fall back to use pthread library find in the top CMakeLists.txt
      target_compile_definitions(fir_vl PRIVATE -DSTDTHREAD)
    endif()
    if(NOT Boost_CHRONO_FOUND)
      target_compile_definitions(fir_vl PRIVATE -DSTDCHRONO)
    endif()
    add_microbenchmark(fir_verbose fir.cpp)
    target_compile_definitions(fir_verbose PRIVATE -DVL -DVERBOSE)
    target_link_libraries(fir_verbose ${VL_LIBRARY})
    if(NOT Boost_ATOMIC_FOUND)
      target_compile_definitions(fir_verbose PRIVATE -DSTDATOMIC)
      target_link_libraries(fir_verbose atomic)
    endif()
    if(NOT Boost_THREAD_FOUND)
      # fall back to use pthread library find in the top CMakeLists.txt
      target_compile_definitions(fir_verbose PRIVATE -DSTDTHREAD)
    endif()
    if(NOT Boost_CHRONO_FOUND)
      target_compile_definitions(fir_verbose PRIVATE -DSTDCHRONO)
    endif()
  endif(NOT VL_FOUND)
endif()
